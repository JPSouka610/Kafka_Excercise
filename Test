def producer_flow(interval=1, symbol="BTCUSDT", topic="market_data", db_config=None, table_name="market_data"):
    try:
        engine = db_engine(credentials_path="db_credentials.json")
        print("Conexión a la base de datos establecida para el productor.")

        producer = create_producer()
        if not producer:
            raise ValueError("No se pudo conectar al productor Kafka.")

        while True:
            raw_data = get_market_data(symbol=symbol)
            if not raw_data:
                print("No se obtuvieron datos crudos. Intentando nuevamente...")
                time.sleep(interval)
                continue

            clean_data = clean_market_data(raw_data)
            if clean_data is None:
                print("Error al limpiar los datos. Intentando nuevamente...")
                time.sleep(interval)
                continue

            # Pasa los valores requeridos a transformations
            transformed_data = transformations(clean_data, smooth_interval=3, smooth_exp=0.3)
            if transformed_data is None:
                print("Error al transformar los datos. Intentando nuevamente...")
                time.sleep(interval)
                continue

            message = transformed_data.to_dict(orient="records")[0]
            producer.send(topic, value=message)
            print(f"Mensaje enviado al tópico '{topic}': {message}")

            try:
                transformed_data.to_sql(table_name, con=engine, if_exists="append", index=False)
                print(f"Datos almacenados en la tabla '{table_name}':")
                print(transformed_data)
            except Exception as db_error:
                print(f"Error al guardar los datos en la base de datos: {db_error}")

            time.sleep(interval)

    except KeyboardInterrupt:
        print("\nProductor detenido manualmente.")
    except Exception as e:
        print(f"Error en el flujo del productor: {e}")
