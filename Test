import requests
import time

def get_market_data(symbol="BTCUSDT", interval="1m"):
    """
    Obtiene datos de mercado reales desde la API de Binance.

    Args:
        symbol (str): Símbolo del par de mercado (e.g., BTCUSDT).
        interval (str): Intervalo de tiempo para los datos (e.g., 1m, 5m, 1h).

    Returns:
        dict: Datos de mercado reales.
    """
    url = f"https://api.binance.com/api/v3/klines"
    params = {
        "symbol": symbol,
        "interval": interval,
        "limit": 1  # Solo queremos el último dato
    }

    try:
        # Realizar la solicitud a la API
        response = requests.get(url, params=params)
        response.raise_for_status()  # Lanza una excepción para códigos de estado no exitosos

        # Procesar los datos de la respuesta
        kline = response.json()[0]  # Tomar el último registro
        market_data = {
            "symbol": symbol,
            "open": float(kline[1]),
            "high": float(kline[2]),
            "low": float(kline[3]),
            "close": float(kline[4]),
            "volume": float(kline[5]),
            "timestamp": int(kline[6]) / 1000  # Convertir de milisegundos a segundos
        }

        return market_data

    except requests.exceptions.RequestException as e:
        print(f"Error al obtener datos de la API: {e}")
        return None

# Prueba de la función
market_data = get_market_data()
if market_data:
    print("Datos de mercado reales obtenidos:")
    print(market_data)
else:
    print("No se pudieron obtener datos de la API.")

